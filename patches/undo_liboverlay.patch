From 07df92828cd90bd71be519fcfbee4ac6771c0aed Mon Sep 17 00:00:00 2001
From: radhakrishna <radhakrishna@codeaurora.org>
Date: Fri, 9 May 2014 16:18:43 +0530
Subject: [PATCH] overlay: Request specific pipe type

Request driver for a specific pipe type instead of
notifying the type request using mdp flags.

Change-Id: I83fffc7c0e1f24d903b7dd6d52a58b87c70f3d4f
---
 hardware/qcom/display-caf-new/liboverlay/overlay.cpp              | 21 +++++++--------------
 hardware/qcom/display-caf-new/liboverlay/overlay.h                |  2 ++
 hardware/qcom/display-caf-new/liboverlay/overlayCtrlData.h        |  7 +++++++
 hardware/qcom/display-caf-new/liboverlay/overlayMdp.cpp           | 17 +++++++++++++++++
 hardware/qcom/display-caf-new/liboverlay/overlayMdp.h             |  2 ++
 hardware/qcom/display-caf-new/liboverlay/pipes/overlayGenPipe.cpp |  4 ++++
 hardware/qcom/display-caf-new/liboverlay/pipes/overlayGenPipe.h   |  2 ++
 7 files changed, 41 insertions(+), 14 deletions(-)

diff --git a/hardware/qcom/display-caf-new/liboverlay/overlay.cpp b/hardware/qcom/display-caf-new/liboverlay/overlay.cpp
index d53b46d..01f174e 100644
--- a/hardware/qcom/display-caf-new/liboverlay/overlay.cpp
+++ b/hardware/qcom/display-caf-new/liboverlay/overlay.cpp
@@ -350,20 +350,8 @@ void Overlay::setSource(const utils::PipeArgs args,
     int index = (int)dest;
     validate(index);
 
-    PipeArgs newArgs(args);
-    if(PipeBook::getPipeType(dest) == OV_MDP_PIPE_VG) {
-        setMdpFlags(newArgs.mdpFlags, OV_MDP_PIPE_SHARE);
-    } else {
-        clearMdpFlags(newArgs.mdpFlags, OV_MDP_PIPE_SHARE);
-    }
-
-    if(PipeBook::getPipeType(dest) == OV_MDP_PIPE_DMA) {
-        setMdpFlags(newArgs.mdpFlags, OV_MDP_PIPE_FORCE_DMA);
-    } else {
-        clearMdpFlags(newArgs.mdpFlags, OV_MDP_PIPE_FORCE_DMA);
-    }
-
-    mPipeBook[index].mPipe->setSource(newArgs);
+    setPipeType(dest, PipeBook::getPipeType(dest));
+    mPipeBook[dest].mPipe->setSource(args);
 }
 
 void Overlay::setVisualParams(const MetaData_t& metadata, utils::eDest dest) {
@@ -372,6 +360,11 @@ void Overlay::setVisualParams(const MetaData_t& metadata, utils::eDest dest) {
     mPipeBook[index].mPipe->setVisualParams(metadata);
 }
 
+void Overlay::setPipeType(utils::eDest pipeIndex,
+        const utils::eMdpPipeType pType) {
+    mPipeBook[pipeIndex].mPipe->setPipeType(pType);
+}
+
 Overlay* Overlay::getInstance() {
     if(sInstance == NULL) {
         sInstance = new Overlay();
diff --git a/hardware/qcom/display-caf-new/liboverlay/overlay.h b/hardware/qcom/display-caf-new/liboverlay/overlay.h
index 455f547..b197512 100644
--- a/hardware/qcom/display-caf-new/liboverlay/overlay.h
+++ b/hardware/qcom/display-caf-new/liboverlay/overlay.h
@@ -177,6 +177,8 @@ class Overlay : utils::NoCopy {
     static void initScalar();
     /* Destroys the scalar object using libscale.so */
     static void destroyScalar();
+    /* Sets the pipe type RGB/VG/DMA*/
+    void setPipeType(utils::eDest pipeIndex, const utils::eMdpPipeType pType);
 
     /* Just like a Facebook for pipes, but much less profile info */
     struct PipeBook {
diff --git a/hardware/qcom/display-caf-new/liboverlay/overlayCtrlData.h b/hardware/qcom/display-caf-new/liboverlay/overlayCtrlData.h
index 51209a7..5cadebd 100644
--- a/hardware/qcom/display-caf-new/liboverlay/overlayCtrlData.h
+++ b/hardware/qcom/display-caf-new/liboverlay/overlayCtrlData.h
@@ -65,6 +65,8 @@ class Ctrl : utils::NoCopy {
     void setPosition(const utils::Dim& dim);
     /* set mdp visual params using metadata */
     bool setVisualParams(const MetaData_t &metadata);
+    /* set pipe type RGB/DMA/VG */
+    void setPipeType(const utils::eMdpPipeType& pType);
     /* mdp set overlay/commit changes */
     bool commit();
 
@@ -159,6 +161,11 @@ inline bool Ctrl::setVisualParams(const MetaData_t &metadata)
     return true;
 }
 
+inline void Ctrl::setPipeType(const utils::eMdpPipeType& pType)
+{
+    mMdp->setPipeType(pType);
+}
+
 inline void Ctrl::dump() const {
     ALOGE("== Dump Ctrl start ==");
     mMdp->dump();
diff --git a/hardware/qcom/display-caf-new/liboverlay/overlayMdp.cpp b/hardware/qcom/display-caf-new/liboverlay/overlayMdp.cpp
index 3af9eaa..5334794 100644
--- a/hardware/qcom/display-caf-new/liboverlay/overlayMdp.cpp
+++ b/hardware/qcom/display-caf-new/liboverlay/overlayMdp.cpp
@@ -125,6 +125,23 @@ void MdpCtrl::setTransform(const utils::eTransform& orient) {
     mOrientation = static_cast<utils::eTransform>(rot);
 }
 
+void MdpCtrl::setPipeType(const utils::eMdpPipeType& pType){
+    switch((int) pType){
+        case utils::OV_MDP_PIPE_RGB:
+            mOVInfo.pipe_type = PIPE_TYPE_RGB;
+            break;
+        case utils::OV_MDP_PIPE_VG:
+            mOVInfo.pipe_type = PIPE_TYPE_VIG;
+            break;
+        case utils::OV_MDP_PIPE_DMA:
+            mOVInfo.pipe_type = PIPE_TYPE_DMA;
+            break;
+        default:
+            mOVInfo.pipe_type = PIPE_TYPE_AUTO;
+            break;
+    }
+}
+
 void MdpCtrl::doTransform() {
     setRotationFlags();
     utils::Whf whf = getSrcWhf();
diff --git a/hardware/qcom/display-caf-new/liboverlay/overlayMdp.h b/hardware/qcom/display-caf-new/liboverlay/overlayMdp.h
index 4b81d8a..de177d1 100644
--- a/hardware/qcom/display-caf-new/liboverlay/overlayMdp.h
+++ b/hardware/qcom/display-caf-new/liboverlay/overlayMdp.h
@@ -84,6 +84,8 @@ class MdpCtrl {
     uint8_t getPriority() const;
     /* setVisualParam */
     bool setVisualParams(const MetaData_t& data);
+    /* sets pipe type RGB/DMA/VG */
+    void setPipeType(const utils::eMdpPipeType& pType);
 
     static bool validateAndSet(MdpCtrl* mdpCtrlArray[], const int& count,
             const int& fbFd);
diff --git a/hardware/qcom/display-caf-new/liboverlay/pipes/overlayGenPipe.cpp b/hardware/qcom/display-caf-new/liboverlay/pipes/overlayGenPipe.cpp
index 303cd34..41cb271 100644
--- a/hardware/qcom/display-caf-new/liboverlay/pipes/overlayGenPipe.cpp
+++ b/hardware/qcom/display-caf-new/liboverlay/pipes/overlayGenPipe.cpp
@@ -68,6 +68,10 @@ bool GenericPipe::setVisualParams(const MetaData_t &metadata)
         return mCtrl->setVisualParams(metadata);
 }
 
+void GenericPipe::setPipeType(const utils::eMdpPipeType& pType) {
+    mCtrl->setPipeType(pType);
+}
+
 bool GenericPipe::commit() {
     bool ret = false;
     int downscale_factor = utils::ROT_DS_NONE;
diff --git a/hardware/qcom/display-caf-new/liboverlay/pipes/overlayGenPipe.h b/hardware/qcom/display-caf-new/liboverlay/pipes/overlayGenPipe.h
index ee6f9ad..c7e16f3 100644
--- a/hardware/qcom/display-caf-new/liboverlay/pipes/overlayGenPipe.h
+++ b/hardware/qcom/display-caf-new/liboverlay/pipes/overlayGenPipe.h
@@ -54,6 +54,8 @@ class GenericPipe : utils::NoCopy {
     void setPosition(const utils::Dim& dim);
     /* set visual param */
     bool setVisualParams(const MetaData_t &metadata);
+    /* set pipe type RGB/DMA/VG */
+    void setPipeType(const utils::eMdpPipeType& pType);
     /* commit changes to the overlay "set"*/
     bool commit();
     /* Data APIs */
-- 
1.9.3

